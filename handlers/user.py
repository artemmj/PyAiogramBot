from aiogram import Router, F
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender

from settings import bot
from database import get_user_data, insert_user
from utils.get_referer_id import get_refer_id
from keyboards.all_kbs import main_kb, home_page_kb

user_router = Router()

universe_text = (
    '–ß—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π '
    '"–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é.'
)


@user_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        user_info = await get_user_data(user_id=message.from_user.id)

    if user_info:
        response_text = f'{user_info.get("full_name")}, –≤–∏–∂—É —á—Ç–æ –≤—ã —É–∂–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {universe_text}'
    else:
        refer_id = get_refer_id(command.args)
        await insert_user(user_data={
            'user_id': message.from_user.id,
            'full_name': message.from_user.full_name,
            'user_login': message.from_user.username,
            'refer_id': refer_id
        })
        if refer_id:
            response_text = (
                f'{message.from_user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ '
                f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID <b>{refer_id}</b>. {universe_text}'
            )
        else:
            response_text = (
                f'{message.from_user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ '
                f'–∏ –Ω–∏ –∑–∞ –∫–µ–º –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã. {universe_text}'
                )

    await message.answer(text=response_text, reply_markup=main_kb(message.from_user.id))


@user_router.message(Command('profile'))
@user_router.message(F.text.contains('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
async def get_profile(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        text = (
            f'üëâ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: <code><b>{message.from_user.id}</b></code>\n'
            f'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_info.get("count_refer")}</b>\n\n'
            f'üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: '
            f'<code>https://t.me/test_bot_bot_2281488_bot?start={message.from_user.id}</code>'
        )
    await message.answer(text, reply_markup=home_page_kb(message.from_user.id))


@user_router.message(F.text.contains('–ù–∞–∑–∞–¥'))
async def cmd_start(message: Message):
    await message.answer(
        f'{message.from_user.first_name}, –≤–∏–∂—É —á—Ç–æ –≤—ã —É–∂–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {universe_text}',
        reply_markup=main_kb(message.from_user.id),
    )
