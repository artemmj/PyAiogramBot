import asyncio
from aiogram import Router, F
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import CallbackQuery, Message

from database import get_user_data
from keyboards.all_kbs import main_kb, spec_kb
from keyboards.inline_kbs import get_inline_kb, ease_link_inline_kb
from keyboards.questionnaire import gender_kb
from handlers.questionnaire import Form
from settings import admins, bot
from filters.is_admin import IsAdmin
from utils.gen_random_person import gen_random_person
from utils.get_msk_time import get_msc_date

# Router –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ë–ª–∞–≥–æ–¥–∞—Ä—è –µ–º—É
# –º—ã –º–æ–∂–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Dispatcher –≤ –∫–∞–∂–¥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ.
start_router = Router()


@start_router.message(CommandStart())  # —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    command_arg: str = command.args  # –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∫—É-–∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
    user_id = message.from_user.id

    user_info = await get_user_data(user_id=message.from_user.id)
    if user_info:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç. –í–∏–∂—É, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏ –∑–Ω–∞—á–∏—Ç —Ç–µ–±–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            reply_markup=main_kb(message.from_user.id))
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', reply_markup=gender_kb())
        await state.set_state(Form.gender)


@start_router.message(Command('start2'))  # –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
async def cmd_start_2(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start2',
        reply_markup=spec_kb(),
    )

# F.text != '–ü–æ–∫–∞!'
# F.text.contains('–ü—Ä–∏–≤–µ—Ç')
# F.text.lower().contains('–ø—Ä–∏–≤–µ—Ç')
# F.text.startswith('–ü—Ä–∏–≤–µ—Ç')
# F.text.endswith('–¥—Ä—É–∂–∏—â–µ')
# ~F.text
# ~F.text.startswith('spam')
# F.text.upper().in_({'–ü–†–ò–í–ï–¢', '–ü–û–ö–ê'})
# F.text.upper().in_(['–ü–†–ò–í–ï–¢', '–ü–û–ö–ê'])
# F.chat.type.in_({"group", "supergroup"})
# f.content_type.in_({'text', 'sticker', 'photo'})
# F.text.len() == 5
# F.text.regexp(r'(?i)^–ü—Ä–∏–≤–µ—Ç, .+')

@start_router.message(F.text == '/start3')  # –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ç–µ–∫—Å—Ç–∞
async def cmd_start_3(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start3',
        reply_markup=ease_link_inline_kb(),
    )


@start_router.callback_query(F.data == 'back_home')
async def back_home(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(
        '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=main_kb(call.message.from_user.id),
    )


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer(
        '–í–æ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏:',
        reply_markup=get_inline_kb(),
    )


@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    # await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
    await call.answer()
    user = gen_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è", –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'), IsAdmin(admins))
async def process_find_word2(message: Message):
    await message.answer('–û, –∞–¥–º–∏–Ω, –∑–¥–∞—Ä–æ–≤–∞! –ê —Ç–µ–±–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è.')


@start_router.message(F.text.lower().contains('–æ—Ö–æ—Ç–Ω–∏–∫'))
async def cmd_start(message: Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer('–Ø –¥—É–º–∞—é, —á—Ç–æ —Ç—ã —Ç—É—Ç –ø—Ä–æ —Ä–∞–¥—É–≥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å')

    # –¢–æ –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    await bot.send_message(chat_id=message.from_user.id, text='–î–ª—è –º–µ–Ω—è —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ')

    # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—É
    msg = await message.reply('–ù—É –≤–æ—Ç —á—Ç–æ –∑–∞ –≥–ª—É–ø–æ—Å—Ç–∏!?')

    # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—É, —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot
    await bot.send_message(
        chat_id=message.from_user.id,
        text='–•–æ—Ç—è, —ç—Ç–æ –∑–∞–±–∞–≤–Ω–æ...',
        reply_to_message_id=msg.message_id,
    )

    await bot.forward_message(
        chat_id=message.from_user.id,
        from_chat_id=message.from_user.id,
        message_id=msg.message_id,
    )

    await message.answer('–í—Å–µ —ç—Ç–æ —à–∏–∑–∞–∞–∞...')

    data_task = {
        'user_id': message.from_user.id,
        'full_name': message.from_user.full_name,
        'username': message.from_user.username,
        'message_id': message.message_id,
        'date': get_msc_date(message.date),
    }
    print(data_task)


@start_router.message(F.text.contains('–ü–ü—Ä–æ—Ñ–∏–ª—å'))
async def start_profile(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        profile_message = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"<b>üÜî ID:</b> {user_info['user_id']}\n"
            f"<b>üíº –õ–æ–≥–∏–Ω:</b> @{user_info['user_login']}\n"
            f"<b>üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user_info['full_name']}\n"
            f"<b>üßë‚Äçü¶∞ –ü–æ–ª:</b> {user_info['gender']}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user_info['age']}\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_info['date_reg']}\n"
            f"<b>üìù –û —Å–µ–±–µ:</b> {user_info['about']}\n"
        )

        await message.answer_photo(photo=user_info.get('photo'), caption=profile_message)
