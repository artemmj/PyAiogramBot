import asyncio

from aiogram import Router, F  # –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import CallbackQuery, Message
from aiogram.utils.chat_action import ChatActionSender

from keyboards.all_kbs import main_kb, spec_kb
from keyboards.inline_kbs import create_qst_inline_kb, get_inline_kb, ease_link_inline_kb

from settings import bot, questions
from utils.gen_random_person import gen_random_person

# Router –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ë–ª–∞–≥–æ–¥–∞—Ä—è –µ–º—É
# –º—ã –º–æ–∂–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Dispatcher –≤ –∫–∞–∂–¥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ.
start_router = Router()


@start_router.message(CommandStart())  # —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def cmd_start(message: Message, command: CommandObject):
    command_args: str = command.args  # –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∫—É-–∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
    user_id = message.from_user.id

    omsg = '–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start'
    if command_args:
        await message.answer(f'{omsg} —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>', reply_markup=main_kb(user_id))
    else:
        await message.answer(f'{omsg} –±–µ–∑ –º–µ—Ç–∫–∏', reply_markup=main_kb(user_id))


@start_router.message(Command('start2'))  # –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
async def cmd_start_2(message: Message):
    await message.answer(
        '–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start2',
        reply_markup=spec_kb(),
    )


@start_router.message(F.text == '/start3')  # –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ç–µ–∫—Å—Ç–∞
async def cmd_start_3(message: Message):
    await message.answer(
        '–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start3',
        reply_markup=ease_link_inline_kb(),
    )


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer(
        '–í–æ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏:',
        reply_markup=get_inline_kb(),
    )


@start_router.callback_query(F.data == 'back_home')
async def back_home(call: CallbackQuery):
    await call.message.answer(
        '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=main_kb(call.message.from_user.id),
    )


@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    # await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
    await call.answer()
    user = gen_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@start_router.message(Command('faq'))
async def cmd_faq(message: Message):
    await message.answer(
        '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏',
        reply_markup=create_qst_inline_kb(questions),
    )


@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_faq_answer(call: CallbackQuery):
    await call.answer()  # –¥–∞–µ–º –ø–æ–Ω—è—Ç—å —Å–µ—Ä–≤–µ—Ä—É —Ç–µ–ª–µ–≥—Ä–∞–º–º —á—Ç–æ –≤—Å–µ —É –Ω–∞—Å —Ö–æ—Ä–æ—à–æ
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = (
        f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n'
        f'<b>{qst_data.get("answer")}</b>\n\n'
        f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    )
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(.5)
        await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))
